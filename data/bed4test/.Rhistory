"Pt1"), Type = c("Case", "Control"), stringsAsFactors = FALSE)
setSampleData(tallyFile, group, sampleData)
getSampleData(tallyFile, group)
startpos <- 115247090
endpos <- 115259515
Counts <- lapply(bamFiles, function(bamf) {
bam2R(file = bamf, chr = chrom, start = startpos, stop = endpos, head.clip = 10)  #we tell it to ignore the first and last 10 sequencing cycles
})
biocLite("deepSNV")
Counts <- lapply(bamFiles, function(bamf) {
bam2R(file = bamf, chr = chrom, start = startpos, stop = endpos, head.clip = 10)  #we tell it to ignore the first and last 10 sequencing cycles
})
library("deepSNV")
Counts <- lapply(bamFiles, function(bamf) {
bam2R(file = bamf, chr = chrom, start = startpos, stop = endpos, head.clip = 10)  #we tell it to ignore the first and last 10 sequencing cycles
})
Counts[[1]][5000:5010, ]
Counts <- lapply(bamFiles, function(bamf) {
bam2R(file = bamf, chr = chrom, start = startpos, stop = endpos, head.clip = 10)  #we tell it to ignore the first and last 10 sequencing cycles
})
Counts[[1]][5000:5010, ]
Coverages <- lapply(Counts, function(count) matrix(c(rowSums(count[, c("A",
"C", "G", "T", "DEL")]), rowSums(count[, c("a", "c", "g", "t", "del")])),
ncol = 2, byrow = FALSE, dimnames = list(NULL, c("Fwd", "Rev"))))
Coverages[[1]][5000:5010, ]
Deletions <- lapply(Counts, function(count) count[, c("DEL", "del")])
Counts <- lapply(Counts, function(count) count[, c("A", "C", "G", "T", "a",
"c", "g", "t")])  # kick out all unnecessary columns
ref <- apply(Counts[[1]][, 1:4] + Counts[[1]][5:8] + Counts[[2]][, 1:4] + Counts[[2]][5:8],
1, which.max)
for (i in seq(length(ref))) {
Counts[[1]][i, ref[i]] <- 0  #Set the forward strand in the first sample to zero
Counts[[1]][i, (ref[i] + 4)] <- 0
Counts[[2]][i, ref[i]] <- 0
Counts[[2]][i, (ref[i] + 4)] <- 0  #Set the reverse strand in the first sample to zero
}
Reference <- ref - 1  #the tally file encodes the reference as A=0,C=1,G=2,T=3
Reference
for (sample in 1:2) {
h5write(t(Counts[[sample]][, 1:4]), tallyFile, paste(group, "Counts", sep = "/"),
index = list(5:8, sample, 1, startpos:endpos))  #Sample One Forward Strand
h5write(t(Counts[[sample]][, 5:8]), tallyFile, paste(group, "Counts", sep = "/"),
index = list(5:8, sample, 2, startpos:endpos))  #Sample One Reverse Strand
h5write(Coverages[[sample]][, "Fwd"], tallyFile, paste(group, "Coverages",
sep = "/"), index = list(sample, 1, startpos:endpos))  #Sample One Forward Strand
h5write(Coverages[[sample]][, "Rev"], tallyFile, paste(group, "Coverages",
sep = "/"), index = list(sample, 2, startpos:endpos))  #Sample One Reverse Strand
h5write(Deletions[[sample]][, "DEL"], tallyFile, paste(group, "Deletions",
sep = "/"), index = list(sample, 1, startpos:endpos))  #Sample Two Forward Strand
h5write(Deletions[[sample]][, "del"], tallyFile, paste(group, "Deletions",
sep = "/"), index = list(sample, 2, startpos:endpos))  #Sample Two Reverse Strand
}
h5write(Reference, tallyFile, paste(group, "Reference", sep = "/"), index = list(startpos:endpos))  #The Reference
h5ls(tallyFile)
data <- h5dapply(filename = tallyFile, group = group, blocksize = 1e+08, range = c(startpos, endpos))[[1]]  # we use a blocksize larger than the range to get all data in one block (extracted by [[1]])
str(data)
tallyFile
shinyApp("/Users/jespinosa/sharedWin")
shinyApp("/Users/jespinosa/shinny_minGB")
library(shiny)
library(h5vc)
library(rhdf5)
shinyApp("/Users/jespinosa/shinny_minGB")
shinyApp("/Users/jespinosa/shinnyapptest")
shinyApp("/Users/jespinosa/shinnyapptest/")
shinyServer()
runApp("/Users/jespinosa/shinny_minGB")
h5ls( tallyFile )
chromosomes  <- h5ls( tallyFile )
chromlengths <- as.numeric(subset( chromosomes, otype == "H5I_DATASET" & name == "Reference" )$dim)
chromosomes  <- subset( chromosomes, otype == "H5I_GROUP" & name != "yeast" )$name
names(chromlengths) = chromosomes
chromlengths
subset( chromosomes, otype == "H5I_GROUP")$name
chromosomes
chromlengths
chromosomes  <- subset( chromosomes, otype == "H5I_GROUP" & name != "2" )$name
subset( chromosomes,name != "2" )$name
chromosomes
chromosomes
h5ls( tallyFile )
chromosomes  <- h5ls( tallyFile )
chromlengths <- as.numeric(subset( chromosomes, otype == "H5I_DATASET" & name == "Reference" )$dim)
subset( chromosomes, otype == "H5I_GROUP")$name
chromosomes  <- subset( chromosomes, otype == "H5I_GROUP")$name
names(chromlengths) = chromosomes
names(chromlengths)
chromlengths <- as.numeric(subset( chromosomes, otype == "H5I_DATASET" & name == "Reference" )$dim)
subset( chromosomes, otype == "H5I_GROUP")$name
tallyFile <- "/var/folders/3b/0cr04q0s3vq_0389xtsl6tvh0000gp/T//RtmpgZ0cvq/DNMT3A.tally.hfs5"
study <- "/NRAS"
h5ls( tallyFile )
as.numeric(subset( chromosomes, otype == "H5I_DATASET" & name == "Reference" )$dim)
chromosomes
chromosomes  <- h5ls( tallyFile )
as.numeric(subset( chromosomes, otype == "H5I_DATASET" & name == "Reference" )$dim)
subset( chromosomes, otype == "H5I_GROUP")$name
chromosomes  <- subset( chromosomes, otype == "H5I_GROUP")$name
names(chromlengths) = chromosomes
tallyFile <- "/var/folders/3b/0cr04q0s3vq_0389xtsl6tvh0000gp/T//RtmpgZ0cvq/DNMT3A.tally.hfs5"
study <- "/NRAS"
h5ls( tallyFile )
chromosomes  <- h5ls( tallyFile )
chromlengths <- as.numeric(subset( chromosomes, otype == "H5I_DATASET" & name == "Reference" )$dim)
chromlengths
subset( chromosomes, otype == "H5I_GROUP")$name
chromlengths
as.numeric(subset( chromosomes, otype == "H5I_DATASET" & name == "Reference" )$dim)
chromosomes
suppressPackageStartupMessages(library(h5vc))  # h5vc is needed
suppressPackageStartupMessages(library(rhdf5))  # rhdf5 is needed
source("http://bioconductor.org/biocLite.R")
biocLite("deepSNV")
suppressPackageStartupMessages(library(deepSNV))  # we use deepSNV for tallying
files <- c("NRAS.AML.bam", "NRAS.Control.bam")
bamFiles <- file.path(system.file("extdata", package = "h5vcData"), files)
suppressPackageStartupMessages(library("Rsamtools"))
chromdim <- sapply(scanBamHeader(bamFiles), function(x) x$targets)
colnames(chromdim) <- files
head(chromdim)
chrom <- "1"
chromlength <- chromdim[chrom, 1]
study <- "/NRAS"
tallyFile <- file.path(tempdir(), "NRAS.tally.hfs5")
if (file.exists(tallyFile)) {
file.remove(tallyFile)
}
h5createFile(tallyFile)
group <- paste(study, chrom, sep = "/")
h5createGroup(tallyFile, study)
h5createGroup(tallyFile, group)
h5createDataset(tallyFile, paste(group, "Counts", sep = "/"), dims = c(12, 2, 2, chromlength), storage.mode = "integer", level = 9)  #Creating the Counts group for chromosome 1 with 12 bases, 2 samples, 2 strands and 249250621 positions                                                                        2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Counts", sep = "/"), dims = c(12, 2,  chromlength), storage.mode = "integer", level = 9)  #Creating the Counts group for chromosome 1 with 12 bases, 2 samples, 2 strands and 249250621 positions                                                                        2, chromlength), storage.mode = "integer", level = 9)
suppressPackageStartupMessages(library(h5vc))  # h5vc is needed
suppressPackageStartupMessages(library(rhdf5))  # rhdf5 is needed
source("http://bioconductor.org/biocLite.R")
biocLite("deepSNV")
suppressPackageStartupMessages(library(deepSNV))  # we use deepSNV for tallying
files <- c("NRAS.AML.bam", "NRAS.Control.bam")
bamFiles <- file.path(system.file("extdata", package = "h5vcData"), files)
suppressPackageStartupMessages(library("Rsamtools"))
chromdim <- sapply(scanBamHeader(bamFiles), function(x) x$targets)
colnames(chromdim) <- files
head(chromdim)
chrom <- "1"
chromlength <- chromdim[chrom, 1]
study <- "/NRAS"
tallyFile <- file.path(tempdir(), "NRAS.tally.hfs5")
if (file.exists(tallyFile)) {
file.remove(tallyFile)
}
h5createFile(tallyFile)
group <- paste(study, chrom, sep = "/")
h5createGroup(tallyFile, study)
h5createGroup(tallyFile, group)
# h5createDataset(tallyFile, paste(group, "Counts", sep = "/"), dims = c(12, 2, 2 chromlength), storage.mode = "integer", level = 9)  #Creating the Counts group for chromosome 1 with 12 bases, 2 samples, 2 strands and 249250621 positions                                                                        2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Counts", sep = "/"), dims = c(2, 2, chromlength), storage.mode = "integer", level = 9)  #Creating the Counts group for chromosome 1 with 12 bases, 2 samples, 2 strands and 249250621 positions                                                                        2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Deletions", sep = "/"), dims = c(2, 2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Coverages", sep = "/"), dims = c(2,
2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Reference", sep = "/"), dims = c(chromlength),
storage.mode = "integer", level = 9)  #Creating the Reference group for chromosome 1 with 249250621 positions
h5ls(tallyFile)
sampleData <- data.frame(Sample = c("AML", "Control"), Column = c(1, 2), Patient = c("Pt1",
"Pt1"), Type = c("Case", "Control"), stringsAsFactors = FALSE)
setSampleData(tallyFile, group, sampleData)
getSampleData(tallyFile, group)
startpos <- 115247090
endpos <- 115259515
biocLite("deepSNV") #bam2R
library("deepSNV")
Counts <- lapply(bamFiles, function(bamf) {
bam2R(file = bamf, chr = chrom, start = startpos, stop = endpos, head.clip = 10)  #we tell it to ignore the first and last 10 sequencing cycles
})
Counts[[1]][5000:5010, ]
Coverages <- lapply(Counts, function(count) matrix(c(rowSums(count[, c("A",
"C", "G", "T", "DEL")]), rowSums(count[, c("a", "c", "g", "t", "del")])),
ncol = 2, byrow = FALSE, dimnames = list(NULL, c("Fwd", "Rev"))))
Coverages[[1]][5000:5010, ]
Deletions <- lapply(Counts, function(count) count[, c("DEL", "del")])
Counts <- lapply(Counts, function(count) count[, c("A", "C", "G", "T", "a",
"c", "g", "t")])  # kick out all unnecessary columns
ref <- apply(Counts[[1]][, 1:4] + Counts[[1]][5:8] + Counts[[2]][, 1:4] + Counts[[2]][5:8],
1, which.max)
for (i in seq(length(ref))) {
Counts[[1]][i, ref[i]] <- 0  #Set the forward strand in the first sample to zero
Counts[[1]][i, (ref[i] + 4)] <- 0
Counts[[2]][i, ref[i]] <- 0
Counts[[2]][i, (ref[i] + 4)] <- 0  #Set the reverse strand in the first sample to zero
}
Reference <- ref - 1  #the tally file encodes the reference as A=0,C=1,G=2,T=3
for (sample in 1:2) {
h5write(t(Counts[[sample]][, 1:4]), tallyFile, paste(group, "Counts", sep = "/"),
index = list(5:8, sample, 1, startpos:endpos))  #Sample One Forward Strand
h5write(t(Counts[[sample]][, 5:8]), tallyFile, paste(group, "Counts", sep = "/"),
index = list(5:8, sample, 2, startpos:endpos))  #Sample One Reverse Strand
h5write(Coverages[[sample]][, "Fwd"], tallyFile, paste(group, "Coverages",
sep = "/"), index = list(sample, 1, startpos:endpos))  #Sample One Forward Strand
h5write(Coverages[[sample]][, "Rev"], tallyFile, paste(group, "Coverages",
sep = "/"), index = list(sample, 2, startpos:endpos))  #Sample One Reverse Strand
h5write(Deletions[[sample]][, "DEL"], tallyFile, paste(group, "Deletions",
sep = "/"), index = list(sample, 1, startpos:endpos))  #Sample Two Forward Strand
h5write(Deletions[[sample]][, "del"], tallyFile, paste(group, "Deletions",
sep = "/"), index = list(sample, 2, startpos:endpos))  #Sample Two Reverse Strand
}
h5write(Reference, tallyFile, paste(group, "Reference", sep = "/"), index = list(startpos:endpos))  #The Reference
h5ls(tallyFile)
data <- h5dapply(filename = tallyFile, group = group, blocksize = 1e+08, range = c(startpos, endpos))[[1]]  # we use a blocksize larger than the range to get all data in one block (extracted by [[1]])
str(data)
tallyFile
source("http://bioconductor.org/biocLite.R")
files <- c("NRAS.AML.bam", "NRAS.Control.bam")
bamFiles <- file.path(system.file("extdata", package = "h5vcData"), files)
suppressPackageStartupMessages(library("Rsamtools"))
chromdim <- sapply(scanBamHeader(bamFiles), function(x) x$targets)
colnames(chromdim) <- files
head(chromdim)
chrom <- "1"
chromlength <- chromdim[chrom, 1]
study <- "/NRAS"
tallyFile <- file.path(tempdir(), "NRAS.tally.hfs5")
if (file.exists(tallyFile)) {
file.remove(tallyFile)
}
h5createFile(tallyFile)
group <- paste(study, chrom, sep = "/")
h5createGroup(tallyFile, study)
h5createGroup(tallyFile, group)
# h5createDataset(tallyFile, paste(group, "Counts", sep = "/"), dims = c(12, 2, 2 chromlength), storage.mode = "integer", level = 9)  #Creating the Counts group for chromosome 1 with 12 bases, 2 samples, 2 strands and 249250621 positions                                                                        2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Counts", sep = "/"), dims = c(2, 2, chromlength), storage.mode = "integer", level = 9)  #Creating the Counts group for chromosome 1 with 12 bases, 2 samples, 2 strands and 249250621 positions                                                                        2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Deletions", sep = "/"), dims = c(2, 2, chromlength), storage.mode = "integer", level = 9)
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
H5close()
files <- c("NRAS.AML.bam", "NRAS.Control.bam")
bamFiles <- file.path(system.file("extdata", package = "h5vcData"), files)
suppressPackageStartupMessages(library("Rsamtools"))
chromdim <- sapply(scanBamHeader(bamFiles), function(x) x$targets)
colnames(chromdim) <- files
head(chromdim)
chrom <- "1"
chromlength <- chromdim[chrom, 1]
study <- "/NRAS"
tallyFile <- file.path(tempdir(), "NRAS.tally.hfs5")
if (file.exists(tallyFile)) {
file.remove(tallyFile)
}
h5createFile(tallyFile)
group <- paste(study, chrom, sep = "/")
h5createGroup(tallyFile, study)
h5createGroup(tallyFile, group)
h5createDataset(tallyFile, paste(group, "Counts", sep = "/"), dims = c(2, 2, chromlength), storage.mode = "integer", level = 9)  #Creating the Counts group for chromosome 1 with 12 bases, 2 samples, 2 strands and 249250621 positions                                                                        2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Deletions", sep = "/"), dims = c(2, 2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Coverages", sep = "/"), dims = c(2,
2, chromlength), storage.mode = "integer", level = 9)
h5createDataset(tallyFile, paste(group, "Reference", sep = "/"), dims = c(chromlength),
storage.mode = "integer", level = 9)  #Creating the Reference group for chromosome 1 with 249250621 positions
h5ls(tallyFile)
h5createDataset(tallyFile, paste(group, "Reference", sep = "/"), dims = c(chromlength),
storage.mode = "integer", level = 9)  #Creating the Reference group for chromosome 1 with 249250621 positions
h5ls(tallyFile)
h5ls(tallyFile)
sampleData <- data.frame(Sample = c("AML", "Control"), Column = c(1, 2), Patient = c("Pt1",
"Pt1"), Type = c("Case", "Control"), stringsAsFactors = FALSE)
setSampleData(tallyFile, group, sampleData)
getSampleData(tallyFile, group)
startpos <- 115247090
endpos <- 115259515
biocLite("deepSNV") #bam2R
library("deepSNV")
Counts <- lapply(bamFiles, function(bamf) {
bam2R(file = bamf, chr = chrom, start = startpos, stop = endpos, head.clip = 10)  #we tell it to ignore the first and last 10 sequencing cycles
})
Counts[[1]][5000:5010, ]
Coverages <- lapply(Counts, function(count) matrix(c(rowSums(count[, c("A",
"C", "G", "T", "DEL")]), rowSums(count[, c("a", "c", "g", "t", "del")])),
ncol = 2, byrow = FALSE, dimnames = list(NULL, c("Fwd", "Rev"))))
Coverages[[1]][5000:5010, ]
Deletions <- lapply(Counts, function(count) count[, c("DEL", "del")])
Counts <- lapply(Counts, function(count) count[, c("A", "C", "G", "T", "a",
"c", "g", "t")])  # kick out all unnecessary columns
ref <- apply(Counts[[1]][, 1:4] + Counts[[1]][5:8] + Counts[[2]][, 1:4] + Counts[[2]][5:8],
1, which.max)
for (i in seq(length(ref))) {
Counts[[1]][i, ref[i]] <- 0  #Set the forward strand in the first sample to zero
Counts[[1]][i, (ref[i] + 4)] <- 0
Counts[[2]][i, ref[i]] <- 0
Counts[[2]][i, (ref[i] + 4)] <- 0  #Set the reverse strand in the first sample to zero
}
Reference <- ref - 1  #the tally file encodes the reference as A=0,C=1,G=2,T=3
for (sample in 1:2) {
h5write(t(Counts[[sample]][, 1:4]), tallyFile, paste(group, "Counts", sep = "/"),
index = list(5:8, sample, 1, startpos:endpos))  #Sample One Forward Strand
h5write(t(Counts[[sample]][, 5:8]), tallyFile, paste(group, "Counts", sep = "/"),
index = list(5:8, sample, 2, startpos:endpos))  #Sample One Reverse Strand
h5write(Coverages[[sample]][, "Fwd"], tallyFile, paste(group, "Coverages",
sep = "/"), index = list(sample, 1, startpos:endpos))  #Sample One Forward Strand
h5write(Coverages[[sample]][, "Rev"], tallyFile, paste(group, "Coverages",
sep = "/"), index = list(sample, 2, startpos:endpos))  #Sample One Reverse Strand
h5write(Deletions[[sample]][, "DEL"], tallyFile, paste(group, "Deletions",
sep = "/"), index = list(sample, 1, startpos:endpos))  #Sample Two Forward Strand
h5write(Deletions[[sample]][, "del"], tallyFile, paste(group, "Deletions",
sep = "/"), index = list(sample, 2, startpos:endpos))  #Sample Two Reverse Strand
}
h5write(Reference, tallyFile, paste(group, "Reference", sep = "/"), index = list(startpos:endpos))  #The Reference
h5ls(tallyFile)
data <- h5dapply(filename = tallyFile, group = group, blocksize = 1e+08, range = c(startpos, endpos))[[1]]  # we use a blocksize larger than the range to get all data in one block (extracted by [[1]])
str(data)
tallyFile
ir <- IRanges(c(3, 8, 14, 15, 19, 34, 40),
width = c(12, 6, 6, 15, 6, 2, 7))
library("GenomicRanges")
ir <- IRanges(c(3, 8, 14, 15, 19, 34, 40),
width = c(12, 6, 6, 15, 6, 2, 7))
par(mfrow=c(4,1), mar=c(4,2,2,2))
plotRanges(ir, xlim=c(0,60))
install.packages ("ph525x")
library("LIM")
par(mfrow=c(4,1), mar=c(4,2,2,2))
plotRanges(ir, xlim=c(0,60))
PlotRanges(ir, xlim=c(0,60))
Plotranges(ir, xlim=c(0,60))
library("IRanges") #plotRanges
par(mfrow=c(4,1), mar=c(4,2,2,2))
plotRanges(ir, xlim=c(0,60))
biocLite("IRanges") #plotRanges
source("http://bioconductor.org/biocLite.R")
biocLite("IRanges") #plotRanges
ir <- IRanges(c(3, 8, 14, 15, 19, 34, 40),
width = c(12, 6, 6, 15, 6, 2, 7))
par(mfrow=c(4,1), mar=c(4,2,2,2))
plotRanges(ir, xlim=c(0,60))
plotRanges(reduce(ir), xlim=c(0,60))
plotRanges(disjoin(ir), xlim=c(0,60))
plotRanges(gaps(ir), xlim=c(0,60))
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)),
+                        col = "black", sep = 0.5, ...)
{
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)), max(end(xlim)))
bins <- disjointBins(IRanges(start(x), end(x)   1))
plot.new()
plot.window(xlim, c(0, max(bins)*(height + sep)))
ybottom <- bins * (sep + height) - height
rect(start(x)-0.5, ybottom, end(x)+0.5, ybottom + height, col = col, ...)
title(main)
axis(1)
}
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)), col = "black", sep = 0.5, ...)
{
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)), max(end(xlim)))
bins <- disjointBins(IRanges(start(x), end(x)   1))
plot.new()
plot.window(xlim, c(0, max(bins)*(height + sep)))
ybottom <- bins * (sep + height) - height
rect(start(x)-0.5, ybottom, end(x)+0.5, ybottom + height, col = col, ...)
title(main)
axis(1)
}
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)), col = "black", sep = 0.5, ...)
{
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)), max(end(xlim)))
bins <- disjointBins(IRanges(start(x), end(x)   1))
plot.new()
plot.window(xlim, c(0, max(bins)*(height + sep)))
ybottom <- bins * (sep + height) - height
rect(start(x)-0.5, ybottom, end(x)+0.5, ybottom + height, col = col, ...)
title(main)
axis(1)
}
ir <- IRanges(c(3, 8, 14, 15, 19, 34, 40),
width = c(12, 6, 6, 15, 6, 2, 7))
bins <- disjointBins(IRanges(start(ir), end(ir) + 1))
library(ggplot2)
ggplot(dat) +
geom_rect(aes(xmin = start, xmax = end,
ymin = bin, ymax = bin + 0.9)) +
theme_bw()
dat <- cbind(as.data.frame(ir), bin = bins)
library(ggplot2)
ggplot(dat) +
geom_rect(aes(xmin = start, xmax = end,
ymin = bin, ymax = bin + 0.9)) +
theme_bw()
ggplot(gr.b) +  geom_line()
gir = GRanges(seqnames="chr1", ir, strand=c(rep("+", 4), rep("-",3)))
plotGRanges(bedRanges, xlim=c(0,60))
set.seed(123)
gr.b <- GRanges(seqnames = "chr1", IRanges(start = seq(1, 100, by = 10),
width = sample(4:9, size = 10, replace = TRUE)),
score = rnorm(10, 10, 3), value = runif(10, 1, 100), id = rep(1:4, each = 3, len = 10))
gr.b
## bar
ggplot(gr.b) + geom_bar(aes(fill = value)) + geom_segment(stat = "identity", aes(y = score + 2))
## line
ggplot(gr.b) +  geom_line()
library("ggbio")
ggplot(gr.b) +  geom_line()
ggplot(gr.b) +  geom_rect(aes(xmin = start, xmax = end,
ymin = bin, ymax = bin + 0.9))
gir
gr17
<-
GRanges
(
"chr17"
,
IRanges
(
41234415
,
41234569
))
gr17 <- GRanges("chr17", IRanges(41234415, 41234569))
gr17
tks <- tracks(p.ideo, mismatch = p.mis, dbSNP = p.vr, ref = p.bg, gene = p.txdb,
heights = c(2, 3, 3, 1, 4)) + xlim(gr17) + theme_tracks_sunset()
tks
library (plotrix) #std.err # mirar si la utilizo
# library (ggplot2)
# library(plyr)
# library("GenomicRanges")
# source("http://bioconductor.org/biocLite.R") #biocLite("BiocUpgrade")
# biocLite("ggbio") # load ggplot function that allows to use Granges
# library("ggbio") # load ggplot function that allows Granges
head (df.data_bed_filt)
source ("/Users/jespinosa/git/phecomp/lib/R/plotParamPublication.R")
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files <-list.files(path=path_files ,pattern = ".bed$")
caseGroupLabel <- "case"
controlGroupLabel <- "control"
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bed = do.call (rbind, lapply (list_files, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
tail(data_bed)
df.data_bed <- merge (data_bed, df.id_group , by.x= "id", by.y = "id")
# head (df.data_bed [which (df.data_bed$id==2),] )
#
colnames (df.data_bed) <- c("id", "chr", "start", "end", "V4", "value", "strand", "V7", "V8", "V9", "group")
df.data_bed$duration <- df.data_bed$end - df.data_bed$start
df.data_bed$duration <- df.data_bed$end - df.data_bed$start
df.data_bed$rate <- df.data_bed$value / df.data_bed$duration
tail(df.data_bed)
df.data_bed$group <- factor(df.data_bed$group , levels=c("control", "case"),
labels=c("control", "case"))
length (df.data_bed[,1])
ini_window <- 1000000
end_window <- 1600000
df.data_bed_filt <- df.data_bed [which (df.data_bed$start > ini_window & df.data_bed$end < end_window),]
pos <- 569984
input_windowsize <- 1000
#
df.data_bed_filt <- df.data_bed [which (df.data_bed$start > max( pos - input_windowsize, 0 ) &
df.data_bed$end < min( pos + input_windowsize, max(df.data_bed$end))),]
head (df.data_bed_filt)
# df_t <- with (df.data_bed_filt , aggregate (cbind (value), list (group=group), mean))
# df_t <- with (df.data_bed_filt , aggregate (cbind (value), list (group=group),FUN=function (x) c (mean=mean(x), std.error=std.error(x))))
df_t <- with (df.data_bed_filt, aggregate (cbind (value, duration, rate), list (group=group),FUN=function (x) c (mean=mean(x), std.error=std.error(x), length(x))))
df_t$meanValue <- df_t$value [,1]
df_t$std.errorValue <- df_t$value [,2]
df_t$number <- df_t$value [,3]
df_t$meanDuration <- df_t$duration [,1]
df_t$std.errorDuration <- df_t$duration [,2]
df_t$meanRate <- df_t$rate [,1]
df_t$std.errorRate <- df_t$rate [,2]
df.mean_bad <- df_t
p = ggplot(data = df.mean_bad, aes(x=group, y=meanValue, fill=group)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=meanValue-std.errorValue, ymax=meanValue+std.errorValue), width=.2, position=position_dodge(.9))
p
ir <- ranges(bedRanges)
df.data_bed_filt
df.data_bed_filt$id <- as.numeric (df.data_bed_filt$id)
ggplot(df.data_bed_filt) +
geom_rect(aes(xmin = start, xmax = end, ymin = id, ymax = id + 0.9))
+
# library(ggplot2)
library(ggplot2)
library(ggplot2)
ggplot(df.data_bed_filt) +
geom_rect(aes(xmin = start, xmax = end, ymin = id, ymax = id + 0.9))
runApp ("/Users/jespinosa/git/shinyPergola/apps/minPhenBrowser")
library(shiny)
runApp ("/Users/jespinosa/git/shinyPergola/apps/minPhenBrowser")
library(shiny)
