data$id <- id
return (data) }))
head (data_bedGr)
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
head (data_bedGr)
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
data_bedGr$id <- as.numeric (data_bedGr$id)
data_bedGr$group <- factor(data_bedGr$group , levels=c("case", "control"),
labels=c("case", "control"))
head (data_bedGr)
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
head (data_bedGr)
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
data_bedGr$id <- as.numeric (data_bedGr$id)
data_bedGr$group <- factor(data_bedGr$group , levels=c("case", "control"),
labels=c("case", "control"))
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr <- transform(data_bedGr, new_id=match(group_id, unique(group_id)))
head(data_bedGr)
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
head (data_bedGr)
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
head (data_bedGr)
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
### Reading BEDGRAPH files
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
head (data_bedGr)
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
data_bedGr$id <- as.numeric (data_bedGr$id)
data_bedGr$group <- factor(data_bedGr$group , levels=c("case", "control"),
labels=c("case", "control"))
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr <- transform(data_bedGr, new_id=match(group_id, unique(group_id)))
head(data_bedGr)
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr$value[1]<-  -3.5
# if (any (data_bedGr$value < 0))
min_v <- floor (min (data_bedGr$value))
max_v <- ceiling (max(data_bedGr$value))
# source("http://bioconductor.org/biocLite.R")
# biocLite("Sushi")
# library("Sushi")
df.dataBedgraph_f <- data_bedGr[which (data_bedGr$start > max( pos - input_windowsize, 0 ) &
data_bedGr$end < min( pos + input_windowsize, max(data_bedGr$end))),]
tr_1 <- data_bedGr [which (data_bedGr$id == 1),]
head (tr_1)
# library("Sushi")
# plotBedgraph(tr_1, "chr1", 100,915000)
p <- ggplot (data = tr_1, fill=group) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = id, ymax = id + value))
p
library("gridExtra")
grid.arrange(p,p, heights = c(5/10, 5/10))
# input_bedGraphRange <- c(-4, 0.5)
input_bedGraphRange <- c(-2, 0.5)
input_bedGraphRange <- c(-1.7, 0.5)
df.dataBedgraph_f [df.dataBedgraph_f$value < input_bedGraphRange [1], "value"] <- input_bedGraphRange[1]+0.001
df.dataBedgraph_f [which (df.dataBedgraph_f$value > input_bedGraphRange [2]), "value"] <- input_bedGraphRange [2] - 0.001
# Using facet to do vertical ploting of bedgraph files
df.dataBedgraph_f$group <- factor(df.dataBedgraph_f$group , levels=c("control","case"),
labels=c("control", "case"))
p <- ggplot (data = df.dataBedgraph_f) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = 0, ymax = value, fill=group)) +
scale_y_continuous(limits=input_bedGraphRange, breaks=input_bedGraphRange, labels=input_bedGraphRange)  +
facet_wrap(~ group_id, ncol= 1)
p
head(data_bedGr)
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr$value[1]<-  -3.5
min_v <- floor (min (data_bedGr$value))
max_v <- ceiling (max(data_bedGr$value))
df.dataBedgraph_f <- data_bedGr[which (data_bedGr$start > max( pos - input_windowsize, 0 ) &
data_bedGr$end < min( pos + input_windowsize, max(data_bedGr$end))),]
pos + input_windowsize
max(data_bedGr$end
)
head(data_bedGr)
### Reading BEDGRAPH files
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
head (data_bedGr)
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
head (data_bedGr)
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
data_bedGr$id <- as.numeric (data_bedGr$id)
data_bedGr$group <- factor(data_bedGr$group , levels=c("case", "control"),
labels=c("case", "control"))
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr <- transform(data_bedGr, new_id=match(group_id, unique(group_id)))
head(data_bedGr)
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr$value[1]<-  -3.5
# if (any (data_bedGr$value < 0))
min_v <- floor (min (data_bedGr$value))
max_v <- ceiling (max(data_bedGr$value))
# source("http://bioconductor.org/biocLite.R")
# biocLite("Sushi")
# library("Sushi")
df.dataBedgraph_f <- data_bedGr[which (data_bedGr$start > max( pos - input_windowsize, 0 ) &
data_bedGr$end < min( pos + input_windowsize, max(data_bedGr$end))),]
tr_1 <- data_bedGr [which (data_bedGr$id == 1),]
head (tr_1)
# library("Sushi")
# plotBedgraph(tr_1, "chr1", 100,915000)
p <- ggplot (data = tr_1, fill=group) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = id, ymax = id + value))
p
library("gridExtra")
grid.arrange(p,p, heights = c(5/10, 5/10))
# input_bedGraphRange <- c(-4, 0.5)
input_bedGraphRange <- c(-2, 0.5)
input_bedGraphRange <- c(-1.7, 0.5)
df.dataBedgraph_f [df.dataBedgraph_f$value < input_bedGraphRange [1], "value"] <- input_bedGraphRange[1]+0.001
df.dataBedgraph_f [which (df.dataBedgraph_f$value > input_bedGraphRange [2]), "value"] <- input_bedGraphRange [2] - 0.001
# Using facet to do vertical ploting of bedgraph files
df.dataBedgraph_f$group <- factor(df.dataBedgraph_f$group , levels=c("control","case"),
labels=c("control", "case"))
p <- ggplot (data = df.dataBedgraph_f) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = 0, ymax = value, fill=group)) +
scale_y_continuous(limits=input_bedGraphRange, breaks=input_bedGraphRange, labels=input_bedGraphRange)  +
facet_wrap(~ group_id, ncol= 1)
p
p <- ggplot (data = df.dataBedgraph_f) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = 0, ymax = value, fill=group)) +
scale_y_continuous(limits=input_bedGraphRange, breaks=input_bedGraphRange, labels=input_bedGraphRange)  +
facet_wrap(~ new_id, ncol= 1)
p
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
head (data_bedGr)
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
data_bedGr$id <- as.numeric (data_bedGr$id)
data_bedGr$group <- factor(data_bedGr$group , levels=c("case", "control"),
labels=c("case", "control"))
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr <- data_bedGr [with(data_bedGr, order(group, id)), ]
head(data_bedGr)
data_bedGr <- transform(data_bedGr, new_id=match(group_id, unique(group_id)))
head(data_bedGr)
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr$value[1]<-  -3.5
# if (any (data_bedGr$value < 0))
min_v <- floor (min (data_bedGr$value))
max_v <- ceiling (max(data_bedGr$value))
# source("http://bioconductor.org/biocLite.R")
# biocLite("Sushi")
# library("Sushi")
df.dataBedgraph_f <- data_bedGr[which (data_bedGr$start > max( pos - input_windowsize, 0 ) &
data_bedGr$end < min( pos + input_windowsize, max(data_bedGr$end))),]
tr_1 <- data_bedGr [which (data_bedGr$id == 1),]
head (tr_1)
# library("Sushi")
# plotBedgraph(tr_1, "chr1", 100,915000)
p <- ggplot (data = tr_1, fill=group) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = id, ymax = id + value))
p
library("gridExtra")
grid.arrange(p,p, heights = c(5/10, 5/10))
# input_bedGraphRange <- c(-4, 0.5)
input_bedGraphRange <- c(-2, 0.5)
input_bedGraphRange <- c(-1.7, 0.5)
df.dataBedgraph_f [df.dataBedgraph_f$value < input_bedGraphRange [1], "value"] <- input_bedGraphRange[1]+0.001
df.dataBedgraph_f [which (df.dataBedgraph_f$value > input_bedGraphRange [2]), "value"] <- input_bedGraphRange [2] - 0.001
# Using facet to do vertical ploting of bedgraph files
df.dataBedgraph_f$group <- factor(df.dataBedgraph_f$group , levels=c("control","case"),
labels=c("control", "case"))
p <- ggplot (data = df.dataBedgraph_f) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = 0, ymax = value, fill=group)) +
scale_y_continuous(limits=input_bedGraphRange, breaks=input_bedGraphRange, labels=input_bedGraphRange)  +
facet_wrap(~ new_id, ncol= 1)
p
data_bedGr <- data_bedGr [with(data_bedGr, order(-group, -id)), ]
data_bedGr <- data_bedGr [with(data_bedGr, order(-group, id)), ]
data_bedGr$new_id <-  with(data_bedGr, factor(new_id, levels = rev(levels(new_id))))
head(data_bedGr)
data_bedGr <- transform(data_bedGr, new_id=match(group_id, unique(group_id)))
data_bedGr
levels(new_id)
with(data_bedGr, factor(new_id, levels = rev(levels(new_id))))
df.id_group$n_group [which (id %% 2 != 0)] <- 1
df.id_group$n_group [which (id %% 2 == 0)] <- 2
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
data_bedGr$id <- as.numeric (data_bedGr$id)
data_bedGr$n_group [which (data_bedGr$group == controlGroupLabel),]
))
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
head (data_bedGr)
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
data_bedGr$id <- as.numeric (data_bedGr$id)
# data_bedGr$group <- factor(data_bedGr$group , levels=c("case", "control"),
#                             labels=c("case", "control"))
data_bedGr$n_group [which (data_bedGr$group == controlGroupLabel),]
controlGroupLabel
data_bedGr$group == controlGroupLabel
data_bedGr$n_group [data_bedGr$group == controlGroupLabel,]
data_bedGr [data_bedGr$group == controlGroupLabel,]
data_bedGr$n_group <- data_bedGr$group
data_bedGr$n_group [data_bedGr$group == controlGroupLabel,]
data_bedGr$n_group [data_bedGr$group == controlGroupLabel]
data_bedGr$n_group [data_bedGr$group == caseGroupLabel] <- 2
data_bedGr$group_id <- paste (data_bedGr$n_group, data_bedGr$id, sep="_")
group_id
data_bedGr$group_id
caseGroupLabel
data_bedGr$n_group [data_bedGr$group == caseGroupLabel]
data_bedGr$n_group <- data_bedGr$group
data_bedGr$n_group [data_bedGr$group == caseGroupLabel]
data_bedGr$n_group [data_bedGr$group == caseGroupLabel] <- 2
data_bedGr$n_group [data_bedGr$group == controlGroupLabel] <- 1
data_bedGr$n_group <- c(1:length (data_bedGr$group))
data_bedGr$n_group [data_bedGr$group == controlGroupLabel] <- 1
data_bedGr$n_group [data_bedGr$group == caseGroupLabel] <- 2
data_bedGr$n_group
data_bedGr$group_id <- paste (data_bedGr$n_group, data_bedGr$id, sep="_")
head(data_bedGr)
data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr$value[1]<-  -3.5
# if (any (data_bedGr$value < 0))
min_v <- floor (min (data_bedGr$value))
max_v <- ceiling (max(data_bedGr$value))
# source("http://bioconductor.org/biocLite.R")
# biocLite("Sushi")
# library("Sushi")
df.dataBedgraph_f <- data_bedGr[which (data_bedGr$start > max( pos - input_windowsize, 0 ) &
data_bedGr$end < min( pos + input_windowsize, max(data_bedGr$end))),]
tr_1 <- data_bedGr [which (data_bedGr$id == 1),]
head (tr_1)
# library("Sushi")
# plotBedgraph(tr_1, "chr1", 100,915000)
p <- ggplot (data = tr_1, fill=group) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = id, ymax = id + value))
p
library("gridExtra")
grid.arrange(p,p, heights = c(5/10, 5/10))
# input_bedGraphRange <- c(-4, 0.5)
input_bedGraphRange <- c(-2, 0.5)
input_bedGraphRange <- c(-1.7, 0.5)
df.dataBedgraph_f [df.dataBedgraph_f$value < input_bedGraphRange [1], "value"] <- input_bedGraphRange[1]+0.001
df.dataBedgraph_f [which (df.dataBedgraph_f$value > input_bedGraphRange [2]), "value"] <- input_bedGraphRange [2] - 0.001
# Using facet to do vertical ploting of bedgraph files
df.dataBedgraph_f$group <- factor(df.dataBedgraph_f$group , levels=c("control","case"),
labels=c("control", "case"))
p <- ggplot (data = df.dataBedgraph_f) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = 0, ymax = value, fill=group)) +
scale_y_continuous(limits=input_bedGraphRange, breaks=input_bedGraphRange, labels=input_bedGraphRange)  +
facet_wrap(~ new_id, ncol= 1)
p
paste (data_bedGr$group, data_bedGr$id, sep="_")
p <- ggplot (data = df.dataBedgraph_f) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = 0, ymax = value, fill=group)) +
scale_y_continuous(limits=input_bedGraphRange, breaks=input_bedGraphRange, labels=input_bedGraphRange)  +
facet_wrap(~ group_id, ncol= 1)
p
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
head (data_bedGr)
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
data_bedGr$id <- as.numeric (data_bedGr$id)
# data_bedGr$group <- factor(data_bedGr$group , levels=c("case", "control"),
#                             labels=c("case", "control"))
data_bedGr$n_group <- c(1:length (data_bedGr$group))
data_bedGr$n_group [data_bedGr$group == controlGroupLabel] <- 1
data_bedGr$n_group [data_bedGr$group == caseGroupLabel] <- 2
data_bedGr$group_id <- paste (data_bedGr$n_group, data_bedGr$id, sep="_")
# data_bedGr <- data_bedGr [with(data_bedGr, order(-group, id)), ]
# data_bedGr <- transform(data_bedGr, new_id=match(group_id, unique(group_id)))
# data_bedGr$new_id <-  with(data_bedGr, factor(new_id, levels = rev(levels(new_id))))
head(data_bedGr)
# data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr$value[1]<-  -3.5
# if (any (data_bedGr$value < 0))
min_v <- floor (min (data_bedGr$value))
max_v <- ceiling (max(data_bedGr$value))
# source("http://bioconductor.org/biocLite.R")
# biocLite("Sushi")
# library("Sushi")
df.dataBedgraph_f <- data_bedGr[which (data_bedGr$start > max( pos - input_windowsize, 0 ) &
data_bedGr$end < min( pos + input_windowsize, max(data_bedGr$end))),]
tr_1 <- data_bedGr [which (data_bedGr$id == 1),]
head (tr_1)
# library("Sushi")
# plotBedgraph(tr_1, "chr1", 100,915000)
p <- ggplot (data = tr_1, fill=group) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = id, ymax = id + value))
p
library("gridExtra")
grid.arrange(p,p, heights = c(5/10, 5/10))
# input_bedGraphRange <- c(-4, 0.5)
input_bedGraphRange <- c(-2, 0.5)
input_bedGraphRange <- c(-1.7, 0.5)
df.dataBedgraph_f [df.dataBedgraph_f$value < input_bedGraphRange [1], "value"] <- input_bedGraphRange[1]+0.001
df.dataBedgraph_f [which (df.dataBedgraph_f$value > input_bedGraphRange [2]), "value"] <- input_bedGraphRange [2] - 0.001
# Using facet to do vertical ploting of bedgraph files
df.dataBedgraph_f$group <- factor(df.dataBedgraph_f$group , levels=c("control","case"),
labels=c("control", "case"))
p <- ggplot (data = df.dataBedgraph_f) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = 0, ymax = value, fill=group)) +
scale_y_continuous(limits=input_bedGraphRange, breaks=input_bedGraphRange, labels=input_bedGraphRange)  +
facet_wrap(~ group_id, ncol= 1)
p
runApp ("/Users/jespinosa/git/shinyPergola/apps/minPhenBrowser")
path_files <- "/Users/jespinosa/git/shinyPergola/data/bed4test"
colours_v <- c("darkgreen", "red", "magenta", "black")
setwd(path_files)
list_files_bedGr <-list.files(path=path_files ,pattern = ".bedGraph$")
# list_files_bedGr
nAnimals <- 4
#Label by experimental group (control, free choice, force diet...)
id <- c (1 : nAnimals)
group <- c (rep (controlGroupLabel, nAnimals/2), rep (caseGroupLabel, nAnimals/2))
df.id_group <- data.frame (id, group)
df.id_group$group [which (id %% 2 != 0)] <- controlGroupLabel
df.id_group$group [which (id %% 2 == 0)] <- caseGroupLabel
data_bedGr = do.call (rbind, lapply (list_files_bedGr, y <- function (x) { data <- read.table (x)
id <- gsub("(^tr_)(\\d+)(_.+$)", "\\2", x)
data$id <- id
return (data) }))
head (data_bedGr)
data_bedGr <- merge (data_bedGr, df.id_group, by.x= "id", by.y = "id")
colnames (data_bedGr) <- c("id", "chrom", "start", "end", "value", "group")
head (data_bedGr)
data_bedGr$id <- as.numeric (data_bedGr$id)
data_bedGr$group <- factor(data_bedGr$group , levels=c("case", "control"),
labels=c("case", "control"))
data_bedGr$n_group <- c(1:length (data_bedGr$group))
data_bedGr$n_group [data_bedGr$group == controlGroupLabel] <- 1
data_bedGr$n_group [data_bedGr$group == caseGroupLabel] <- 2
data_bedGr$group_id <- paste (data_bedGr$n_group, data_bedGr$id, sep="_")
# data_bedGr <- data_bedGr [with(data_bedGr, order(-group, id)), ]
# data_bedGr <- transform(data_bedGr, new_id=match(group_id, unique(group_id)))
# data_bedGr$new_id <-  with(data_bedGr, factor(new_id, levels = rev(levels(new_id))))
head(data_bedGr)
# data_bedGr$group_id <- paste (data_bedGr$group, data_bedGr$id, sep="_")
data_bedGr$value[1]<-  -3.5
# if (any (data_bedGr$value < 0))
min_v <- floor (min (data_bedGr$value))
max_v <- ceiling (max(data_bedGr$value))
# source("http://bioconductor.org/biocLite.R")
# biocLite("Sushi")
# library("Sushi")
df.dataBedgraph_f <- data_bedGr[which (data_bedGr$start > max( pos - input_windowsize, 0 ) &
data_bedGr$end < min( pos + input_windowsize, max(data_bedGr$end))),]
tr_1 <- data_bedGr [which (data_bedGr$id == 1),]
head (tr_1)
# library("Sushi")
# plotBedgraph(tr_1, "chr1", 100,915000)
p <- ggplot (data = tr_1, fill=group) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = id, ymax = id + value))
p
library("gridExtra")
grid.arrange(p,p, heights = c(5/10, 5/10))
# input_bedGraphRange <- c(-4, 0.5)
input_bedGraphRange <- c(-2, 0.5)
input_bedGraphRange <- c(-1.7, 0.5)
df.dataBedgraph_f [df.dataBedgraph_f$value < input_bedGraphRange [1], "value"] <- input_bedGraphRange[1]+0.001
df.dataBedgraph_f [which (df.dataBedgraph_f$value > input_bedGraphRange [2]), "value"] <- input_bedGraphRange [2] - 0.001
# Using facet to do vertical ploting of bedgraph files
df.dataBedgraph_f$group <- factor(df.dataBedgraph_f$group , levels=c("control","case"),
labels=c("control", "case"))
p <- ggplot (data = df.dataBedgraph_f) +
#      geom_line(data = tr_1, aes(x = , y = Percent.Change, color = "red"))
geom_rect (aes(xmin = start, xmax = end, ymin = 0, ymax = value, fill=group)) +
scale_y_continuous(limits=input_bedGraphRange, breaks=input_bedGraphRange, labels=input_bedGraphRange)  +
facet_wrap(~ group_id, ncol= 1)
p
runApp ("/Users/jespinosa/git/shinyPergola/apps/minPhenBrowser")
